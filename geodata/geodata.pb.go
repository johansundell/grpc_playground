// Code generated by protoc-gen-go.
// source: geodata.proto
// DO NOT EDIT!

/*
Package geodata is a generated protocol buffer package.

It is generated from these files:
	geodata.proto

It has these top-level messages:
	PostalRegionRequest
	PostalRegionResponse
*/
package geodata

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PostalRegionRequest struct {
	ZipCode int32 `protobuf:"varint,1,opt,name=zip_code,json=zipCode" json:"zip_code,omitempty"`
}

func (m *PostalRegionRequest) Reset()                    { *m = PostalRegionRequest{} }
func (m *PostalRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*PostalRegionRequest) ProtoMessage()               {}
func (*PostalRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PostalRegionRequest) GetZipCode() int32 {
	if m != nil {
		return m.ZipCode
	}
	return 0
}

type PostalRegionResponse struct {
	PostalRegion string `protobuf:"bytes,1,opt,name=postal_region,json=postalRegion" json:"postal_region,omitempty"`
}

func (m *PostalRegionResponse) Reset()                    { *m = PostalRegionResponse{} }
func (m *PostalRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*PostalRegionResponse) ProtoMessage()               {}
func (*PostalRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PostalRegionResponse) GetPostalRegion() string {
	if m != nil {
		return m.PostalRegion
	}
	return ""
}

func init() {
	proto.RegisterType((*PostalRegionRequest)(nil), "geodata.PostalRegionRequest")
	proto.RegisterType((*PostalRegionResponse)(nil), "geodata.PostalRegionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GeoData service

type GeoDataClient interface {
	GetPostalRegion(ctx context.Context, in *PostalRegionRequest, opts ...grpc.CallOption) (*PostalRegionResponse, error)
}

type geoDataClient struct {
	cc *grpc.ClientConn
}

func NewGeoDataClient(cc *grpc.ClientConn) GeoDataClient {
	return &geoDataClient{cc}
}

func (c *geoDataClient) GetPostalRegion(ctx context.Context, in *PostalRegionRequest, opts ...grpc.CallOption) (*PostalRegionResponse, error) {
	out := new(PostalRegionResponse)
	err := grpc.Invoke(ctx, "/geodata.GeoData/GetPostalRegion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GeoData service

type GeoDataServer interface {
	GetPostalRegion(context.Context, *PostalRegionRequest) (*PostalRegionResponse, error)
}

func RegisterGeoDataServer(s *grpc.Server, srv GeoDataServer) {
	s.RegisterService(&_GeoData_serviceDesc, srv)
}

func _GeoData_GetPostalRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostalRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoDataServer).GetPostalRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geodata.GeoData/GetPostalRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoDataServer).GetPostalRegion(ctx, req.(*PostalRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GeoData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "geodata.GeoData",
	HandlerType: (*GeoDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostalRegion",
			Handler:    _GeoData_GetPostalRegion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geodata.proto",
}

func init() { proto.RegisterFile("geodata.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4f, 0xcd, 0x4f,
	0x49, 0x2c, 0x49, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x0c, 0xb8,
	0x84, 0x03, 0xf2, 0x8b, 0x4b, 0x12, 0x73, 0x82, 0x52, 0xd3, 0x33, 0xf3, 0xf3, 0x82, 0x52, 0x0b,
	0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x24, 0xb9, 0x38, 0xaa, 0x32, 0x0b, 0xe2, 0x93, 0xf3, 0x53, 0x52,
	0x25, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0xd8, 0xab, 0x32, 0x0b, 0x9c, 0xf3, 0x53, 0x52, 0x95,
	0xac, 0xb9, 0x44, 0x50, 0x75, 0x14, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x29, 0x73, 0xf1, 0x16,
	0x80, 0xc5, 0xe3, 0x8b, 0xc0, 0x12, 0x60, 0x7d, 0x9c, 0x41, 0x3c, 0x05, 0x48, 0x8a, 0x8d, 0xa2,
	0xb9, 0xd8, 0xdd, 0x53, 0xf3, 0x5d, 0x12, 0x4b, 0x12, 0x85, 0x02, 0xb8, 0xf8, 0xdd, 0x53, 0x4b,
	0x90, 0x8d, 0x12, 0x92, 0xd1, 0x83, 0xb9, 0x12, 0x8b, 0x9b, 0xa4, 0x64, 0x71, 0xc8, 0x42, 0xec,
	0x57, 0x62, 0x48, 0x62, 0x03, 0xfb, 0xcd, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x55, 0xf9, 0x39,
	0x9b, 0xec, 0x00, 0x00, 0x00,
}
